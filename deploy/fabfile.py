from __future__ import print_function
import sys
import os
import socket
import time
from fabric.api import env, lcd, run, abort, local
from fabric.contrib.console import confirm
# from secrets import PROD_DIR
import getpass

"""
    This must be run on the admin server.

    Run like so:
        fab deploy admin
        fab deploy production

    To update the galleries and press release directories:
        fab deploy admin_galleries
        fab deploy production_galleries

    * The reason this is run on admin is people work on different
    local dev environments and it was getting tedious maintaining this
    fabfile working on Windows machines.

"""

################################################################################
# Configuration
################################################################################

# Was in secrets.py... but secret no more
PROD_DIR = "/Library/WebServer/Documents/"  # full path to web root directory including trailing slash

REPO = 'https://github.com/SETI/pds-website.git'
branch = 'master'

ADMIN_HOST = 'admin.pds-rings.csc.seti.org'
# PRODUCTION_HOST = 'server2.pds-rings.seti.org'
PRODUCTION_HOST = 'server1.pds-rings.seti.org'
SERVER1_HOST = 'server1.pds-rings.seti.org'
SERVER2_HOST = 'server2.pds-rings.seti.org'
MARK_HOST = 'mark.local'

# a home directory location for the repo on admin and production
# don't forget trailing slashes here:

ADMIN_REPO = '~/pds-website/'  # your local copy of the repo on admin
                                     # this script deploys the website
                                     # generated by this install either
                                     # to admin or to production web roots

MARK_REPO = '~/GitHub/pds-website/'

SERVER_STAGING_DIR = '~/website_staging/'# an rsync target on the production machine
                                         # since you can't rsync directly into
                                         # prod web root from another machine

git_revision = ''  # use this to roll back to past commit, leave blank for latest
jekyll_version = '' #'_3.8.3_' # leave blank to go with system default

################################################################################
# End of configuration
################################################################################

USERNAME = getpass.getuser()  # expects same user name on all machines
                              # = local, admin, prod
                              # This is not true for Matt, so...
if USERNAME == 'matthewt': USERNAME = 'mtiscareno'
env.hosts = [ADMIN_HOST]      # only admin server has remote logins

# Needed for website directories parallel to "website/"
# For example, "website_galleries/"

links = [
    "_config.production.yml",
    "_config.yml",
    "_data",
    "_includes",
    "_layouts",
    "_posts",
    "_sass"
]

def deploy():
    """ do some setup things """
    pass  # there are no setup things


def admin(suffix=""):
    """ This script will update a local repo in user home directory
        to the branch and git_revision on github,
        build the site in user local directory, then
        deploy the website to admin server web root.
        You must be logged into admin running this script on admin.
    """

    admin_website = 'https://{}'.format(ADMIN_HOST)

    # get the latest from github
    with lcd(ADMIN_REPO):
        local('git checkout {}'.format(branch))
        if git_revision:
            local('git checkout {}'.format(git_revision))
        local('git pull')

    # build the site and then move into web root
    with lcd(ADMIN_REPO + "website" + suffix + "/"):

        # Make sure necessary files or symlinks are present
        if suffix:
            for link in links:
                dest = "../website" + suffix + "/" + link
                if not os.path.exists(dest):
                    os.symlink("../website/" + link, dest)

        local("jekyll {} build --config _config.yml,_config.production.yml".format(jekyll_version))

        # copy the website to the production directory
        rsync_cmd = "sudo rsync -r %s _site/ %s. "

        # first do a dry run:
        local(rsync_cmd % ('--dry-run --itemize-changes ', PROD_DIR))
        if confirm("The above was a dry run. If the above looks good, push to admin site:"):
            local(rsync_cmd % ('', PROD_DIR))
            print("\n*** Admin Website Has Been Updated! ***\n Take a look: {}".format(admin_website))
            sys.exit()
        else:
            print("\nDeployment Aborted\n")

def admin_galleries():
    admin(suffix="_galleries")

def localhost(suffix=""):
    """ Deploy script to the local server; no pull from the repo first.
    """

    # DON'T get the latest from github
#     with lcd(ADMIN_REPO):
#         local('git checkout {}'.format(branch))
#         if git_revision:
#             local('git checkout {}'.format(git_revision))
#         local('git pull')

    print('\nNote: This script does not pull from the repo first!\n')

    # build the site and then move into web root
    with lcd("../website" + suffix + "/"):

        # Make sure necessary files or symlinks are present
        if suffix:
            for link in links:
                dest = "../website" + suffix + "/" + link
                if not os.path.exists(dest):
                    os.symlink("../website/" + link, dest)

        local("jekyll build --config _config.yml,_config.production.yml")

        # copy the website to the production directory
        rsync_cmd = "sudo rsync -r %s  _site/ %s. "
        prod_dir = '/Library/WebServer/Documents/'

        # first do a dry run:
        local(rsync_cmd % ('--dry-run --itemize-changes ', prod_dir))
        if confirm("The above was a dry run. If the above looks good, push to the local site:"):
            local(rsync_cmd % ('', prod_dir))
            print("\n*** Local website has been updated! ***")
            sys.exit()
        else:
            print("\nDeployment Aborted\n")

def localhost_galleries():
    localhost(suffix="_galleries")

def localhost_8080(suffix=""):
    """ Deploy script to the local Documents-8080 directory; no pull from the repo first.
    """

    # DON'T get the latest from github
#     with lcd(ADMIN_REPO):
#         local('git checkout {}'.format(branch))
#         if git_revision:
#             local('git checkout {}'.format(git_revision))
#         local('git pull')

    print('\nNote: This script does not pull from the repo first!\n')

    # build the site and then move into web root
    with lcd("../website" + suffix + "/"):

        # Make sure necessary files or symlinks are present
        if suffix:
            for link in links:
                dest = "../website" + suffix + "/" + link
                if not os.path.exists(dest):
                    os.symlink("../website/" + link, dest)

        local("jekyll build --config _config.yml,_config.production.yml")

        # copy the website to the production directory
        rsync_cmd = "sudo rsync -r %s _site/ %s. "
        prod_dir = '/Library/WebServer/Documents-8080/'

        # first do a dry run:
        local(rsync_cmd % ('--dry-run --itemize-changes ', prod_dir))
        if confirm("The above was a dry run. If the above looks good, push to the local 8080 site:"):
            local(rsync_cmd % ('', prod_dir))
            print("\n*** Local website on ports 8080 and 8443 has been updated! ***")
            sys.exit()
        else:
            print("\nDeployment Aborted\n")

def localhost_8080_galleries():
    localhost_8080(suffix="_galleries")

def mark(suffix=""):
    """ Deploy script for Mark's laptop
    """

    # DON'T get the latest from github
#     with lcd(ADMIN_REPO):
#         local('git checkout {}'.format(branch))
#         if git_revision:
#             local('git checkout {}'.format(git_revision))
#         local('git pull')

    print('\nNote: This script does not pull from the repo first!\n')

    mark_website = 'http://{}'.format(MARK_HOST)

    # build the site and then move into web root
    with lcd(MARK_REPO + "website" + suffix + "/"):

        # Make sure necessary files or symlinks are present
        if suffix:
            for link in links:
                dest = "../website" + suffix + "/" + link
                if not os.path.exists(dest):
                    os.symlink("../website/" + link, dest)

        local("jekyll {} build --config _config.yml,_config.production.yml".format(jekyll_version))

        # copy the website to the production directory
        rsync_cmd = "sudo rsync -r %s --exclude=*.tif --exclude=*.tiff --exclude=*.tgz --exclude=*.tar.gz _site/ %s. "

        # first do a dry run:
        local(rsync_cmd % ('--dry-run --itemize-changes ', PROD_DIR))
        if confirm("The above was a dry run. If the above looks good, push to admin site:"):
            local(rsync_cmd % ('', PROD_DIR))
            print("\n*** Website Has Been Updated! ***\n Take a look: {}".format(mark_website))
            sys.exit()
        else:
            print("\nDeployment Aborted\n")

def mark_galleries():
    mark(suffix="_galleries")

def production(host=PRODUCTION_HOST, suffix=""):
    """ rsyncs admin server from ADMIN_REPO to production server web root
    """

    server_login = '{}@{}'.format(USERNAME, host)

    if confirm("""
            -----

            You will be deploying the website from the admin server
            generated in {}
            to the website at {}.

            During this process you will be prompted for a password, where
            you will need to enter your production server sudo password.

            Do you want to continue?

            """.format(ADMIN_REPO, host, default=False)):

        # move the site over to the production server staging directory
        # this step is here bc server settings = you can't deploy remotely
        # directly into web root
        rsync_cmd = "rsync -r ../website{}/_site/ {}:{}".format(suffix, server_login, SERVER_STAGING_DIR)
        print('\n' + rsync_cmd + '\n')
        local(rsync_cmd)

        # shell into production, rsync from home dir staging into web root
        ssh_cmd = 'ssh -t {} "sudo rsync -r {} {}"'.format(server_login, SERVER_STAGING_DIR, PROD_DIR)
        print('\n' + ssh_cmd + '\n')
        local(ssh_cmd)

        print("\n*** Website has been updated! ***: https://" + host)

def server1(suffix=""):
    production(host=SERVER1_HOST, suffix=suffix)

def server2(suffix=""):
    production(host=SERVER2_HOST, suffix=suffix)

def production_galleries():
    production(suffix="_galleries")

def server1_galleries(suffix="_galleries"):
    production(host=SERVER1_HOST, suffix=suffix)

def server2_galleries(suffix="_galleries"):
    production(host=SERVER2_HOST, suffix=suffix)

