"""
    This must be run on the staging server.

    Run like so:
        fab deploy staging
        fab deploy production

    To update the galleries and press release directories:
        fab deploy staging_galleries
        fab deploy production_galleries
"""

import getpass
import os
import sys
import fabric
from fabric import task

################################################################################
# Configuration
################################################################################

WEBROOT_DIR = '/var/www/documents'  # full path to web root directory, no trailing slash

REPO = 'https://github.com/SETI/pds-website.git'
branch = 'master'

STAGING_HOST = 'staging.pds.seti.org'
SERVER1_HOST = 'server3.pds-rings.seti.org'
SERVER2_HOST = 'server4.pds-rings.seti.org'
MARK_HOST = 'mark.local'
USERNAME = 'webmaster'

# a home directory location for the repo on staging and production
# don't forget trailing slashes here:

STAGING_REPO = os.path.expanduser('~/pds-website')
                                # your local copy of the repo on staging
                                # this script deploys the website
                                # generated by this install either
                                # to staging or to production web roots

MARK_REPO = '~/GitHub/pds-website/'

# Where to deploy the new copy of the website to so that it can be copied to the
# production servers
MASTER_DIR = '/volumes/webserver_assets/documents'

git_revision = ''  # use this to roll back to past commit, leave blank for latest
jekyll_version = '' #'_3.8.3_' # leave blank to go with system default

################################################################################
# End of configuration
################################################################################

USERNAME = getpass.getuser()  # expects same user name on all machines
                              # = local, staging, prod
                              # This is not true for Matt, so...
if USERNAME == 'matthewt': USERNAME = 'mtiscareno'

# Needed for website directories parallel to "website/"
# For example, "website_galleries/"

links = [
    "_config.production.yml",
    "_config.yml",
    "_data",
    "_includes",
    "_layouts",
    "_posts",
    "_sass"
]

def _confirm(s):
    print(s, end=' ')
    while True:
        confirm = input('[Y/n]')
        if confirm == '':
            confirm = 'Y'
        if confirm.lower() in ('y', 'n'):
            break
    return confirm.lower() == 'y'

@task
def deploy(c):
    """Setup before deploy"""
    pass  # there are no setup things

@task
def staging(c, suffix=""):
    """Pull repo and deploy to local webroot"""
    # This script will update a local repo in user home directory
    # to the branch and git_revision on github,
    # build the site in user local directory, then
    # deploy the website to staging server web root.
    # You must be logged into staging running this script on staging

    staging_website = f'https://{STAGING_HOST}'

    # get the latest from github
    os.chdir(STAGING_REPO)
    os.system(f'git checkout {branch}')
    if git_revision:
        os.system(f'git checkout {git_revision}')
    os.system('git pull')

    # build the site and then move into web root
    os.chdir(f'{STAGING_REPO}/website{suffix}')
    # Make sure necessary files or symlinks are present
    if suffix:
        for link in links:
            dest = f'../website{suffix}/{link}'
            if not os.path.exists(dest):
                os.symlink(f'../website/{link}', dest)

    os.system(f'umask 002;jekyll {jekyll_version} build --config _config.yml,_config.production.yml')

    # first show differences using file contents
    print('--- START DIFFS ---')
    os.system(f'diff -rq _site {WEBROOT_DIR} |'
              f'grep -v "Only in {WEBROOT_DIR}" |'
              f'grep -v "Common subdirectories"')
    print('--- END DIFFS ---')
    if not _confirm('The above was a list of differences.\nIf it looks good, '
                    'push to staging site:'):
        print('\nDeployment Aborted\n')
        sys.exit()
    os.system(f'sudo rsync -av --checksum _site/ {WEBROOT_DIR}')
    os.system(f'sudo chown -R webmaster:www-data {WEBROOT_DIR}')
    os.system(f'sudo chmod -R g+w {WEBROOT_DIR}')
    print(f'\n*** Staging website has been updated! ***\n Take a look: {staging_website}')

def staging_galleries():
    staging(suffix='_galleries')

@task
def production(c, suffix=""):
    """Copy from staging server to master copy to each production server"""

    if not _confirm(f"""
You will be deploying the website from the staging server
generated in {STAGING_REPO}
to the website servers at
{SERVER1_HOST} and {SERVER2_HOST}.

Do you want to continue?"""):
        print('\nDeployment Aborted\n')
        sys.exit()


    os.chdir(f'{STAGING_REPO}/website{suffix}')
    # first show differences using file contents
    print('--- START DIFFS ---')
    os.system(f'diff -rq _site/ {MASTER_DIR} |'
              f'grep -v "Only in {MASTER_DIR}" |'
              f'grep -v "Common subdirectories"; echo')
    print('--- END DIFFS ---')
    if not _confirm('The above was a list of differences. If the above looks good, '
                    'push to master directory:'):
        print('\nDeployment Aborted\n')
        sys.exit()

    # Must run with sudo for rsync to set times on a RAID volume
    os.system(f'sudo rsync -av --checksum _site/ {MASTER_DIR}')
    os.system(f'sudo chown -R webmaster:www-data {MASTER_DIR}')
    os.system(f'sudo chmod -R g+w {MASTER_DIR}')
    print(f'\n*** Master directory has been updated!')

    print(f'Updating production servers...')
    fabric.SerialGroup(
        f'{USERNAME}@{SERVER1_HOST}',
        f'{USERNAME}@{SERVER2_HOST}').run(
        f'rsync -av {MASTER_DIR}/ {WEBROOT_DIR}')

    print('\n*** Websites have been updated! ***')

def production_galleries():
    production(suffix="_galleries")

# def localhost(suffix=''):
#     """ Deploy script to the local server; no pull from the repo first.
#     """
#
#     # DON'T get the latest from github
# #     with lcd(ADMIN_REPO):
# #         local('git checkout {}'.format(branch))
# #         if git_revision:
# #             local('git checkout {}'.format(git_revision))
# #         local('git pull')
#
#     print('\nNote: This script does not pull from the repo first!\n')
#
#     # build the site and then move into web root
#     with lcd("../website" + suffix + "/"):
#
#         # Make sure necessary files or symlinks are present
#         if suffix:
#             for link in links:
#                 dest = "../website" + suffix + "/" + link
#                 if not os.path.exists(dest):
#                     os.symlink("../website/" + link, dest)
#
#         local("jekyll build --config _config.yml,_config.production.yml")
#
#         # copy the website to the production directory
#         rsync_cmd = "sudo rsync -r %s  _site/ %s. "
#         WEBROOT_DIR = '/Library/WebServer/Documents/'
#
#         # first do a dry run:
#         local(rsync_cmd % ('--dry-run --itemize-changes ', WEBROOT_DIR))
#         if confirm("The above was a dry run. If the above looks good, push to the local site:"):
#             local(rsync_cmd % ('', WEBROOT_DIR))
#             print("\n*** Local website has been updated! ***")
#             sys.exit()
#         else:
#             print("\nDeployment Aborted\n")
#
# def localhost_galleries():
#     localhost(suffix="_galleries")
#
# def localhost_8080(suffix=""):
#     """ Deploy script to the local Documents-8080 directory; no pull from the repo first.
#     """
#
#     # DON'T get the latest from github
# #     with lcd(ADMIN_REPO):
# #         local('git checkout {}'.format(branch))
# #         if git_revision:
# #             local('git checkout {}'.format(git_revision))
# #         local('git pull')
#
#     print('\nNote: This script does not pull from the repo first!\n')
#
#     # build the site and then move into web root
#     with lcd("../website" + suffix + "/"):
#
#         # Make sure necessary files or symlinks are present
#         if suffix:
#             for link in links:
#                 dest = "../website" + suffix + "/" + link
#                 if not os.path.exists(dest):
#                     os.symlink("../website/" + link, dest)
#
#         local("jekyll build --config _config.yml,_config.production.yml")
#
#         # copy the website to the production directory
#         rsync_cmd = "sudo rsync -r %s _site/ %s. "
#         WEBROOT_DIR = '/Library/WebServer/Documents-8080/'
#
#         # first do a dry run:
#         local(rsync_cmd % ('--dry-run --itemize-changes ', WEBROOT_DIR))
#         if confirm("The above was a dry run. If the above looks good, push to the local 8080 site:"):
#             local(rsync_cmd % ('', WEBROOT_DIR))
#             print("\n*** Local website on ports 8080 and 8443 has been updated! ***")
#             sys.exit()
#         else:
#             print("\nDeployment Aborted\n")
#
# def localhost_8080_galleries():
#     localhost_8080(suffix="_galleries")
#
# def mark(suffix=""):
#     """ Deploy script for Mark's laptop
#     """
#
#     # DON'T get the latest from github
# #     with lcd(ADMIN_REPO):
# #         local('git checkout {}'.format(branch))
# #         if git_revision:
# #             local('git checkout {}'.format(git_revision))
# #         local('git pull')
#
#     print('\nNote: This script does not pull from the repo first!\n')
#
#     mark_website = 'http://{}'.format(MARK_HOST)
#
#     # build the site and then move into web root
#     with lcd(MARK_REPO + "website" + suffix + "/"):
#
#         # Make sure necessary files or symlinks are present
#         if suffix:
#             for link in links:
#                 dest = "../website" + suffix + "/" + link
#                 if not os.path.exists(dest):
#                     os.symlink("../website/" + link, dest)
#
#         local("jekyll {} build --config _config.yml,_config.production.yml".format(jekyll_version))
#
#         # copy the website to the production directory
#         rsync_cmd = "sudo rsync -r %s --exclude=*.tif --exclude=*.tiff --exclude=*.tgz --exclude=*.tar.gz _site/ %s. "
#
#         # first do a dry run:
#         local(rsync_cmd % ('--dry-run --itemize-changes ', WEBROOT_DIR))
#         if confirm("The above was a dry run. If the above looks good, push to staging site:"):
#             local(rsync_cmd % ('', WEBROOT_DIR))
#             print("\n*** Website Has Been Updated! ***\n Take a look: {}".format(mark_website))
#             sys.exit()
#         else:
#             print("\nDeployment Aborted\n")
#
# def mark_galleries():
#     mark(suffix="_galleries")
